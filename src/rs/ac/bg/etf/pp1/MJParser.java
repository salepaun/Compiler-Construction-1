
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 11 13:53:33 CEST 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Sat Aug 11 13:53:33 CEST 2018
 */
public class MJParser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public MJParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public MJParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(
			new String[] { "\000\156\000\002\057\002\000\002\002\011\000\002\002"
					+ "\004\000\002\050\003\000\002\003\004\000\002\003\002"
					+ "\000\002\004\003\000\002\004\003\000\002\004\003\000"
					+ "\002\060\002\000\002\061\002\000\002\016\013\000\002"
					+ "\020\003\000\002\020\003\000\002\020\003\000\002\062"
					+ "\002\000\002\017\010\000\002\017\002\000\002\005\004"
					+ "\000\002\005\002\000\002\063\002\000\002\006\010\000"
					+ "\002\007\006\000\002\007\002\000\002\013\004\000\002"
					+ "\013\002\000\002\064\002\000\002\010\012\000\002\012"
					+ "\005\000\002\012\002\000\002\011\004\000\002\011\002"
					+ "\000\002\052\003\000\002\014\004\000\002\014\002\000"
					+ "\002\065\002\000\002\066\002\000\002\067\002\000\002"
					+ "\015\016\000\002\053\003\000\002\053\003\000\002\023"
					+ "\003\000\002\023\002\000\002\021\005\000\002\021\003"
					+ "\000\002\022\005\000\002\026\004\000\002\026\002\000"
					+ "\002\027\003\000\002\027\003\000\002\033\005\000\002"
					+ "\033\007\000\002\034\004\000\002\034\007\000\002\034"
					+ "\011\000\002\034\004\000\002\034\004\000\002\034\004"
					+ "\000\002\034\005\000\002\034\007\000\002\034\007\000"
					+ "\002\034\005\000\002\035\004\000\002\036\004\000\002"
					+ "\036\005\000\002\036\003\000\002\036\003\000\002\055"
					+ "\005\000\002\055\003\000\002\070\002\000\002\054\005"
					+ "\000\002\041\005\000\002\041\002\000\002\042\005\000"
					+ "\002\042\002\000\002\056\003\000\002\056\003\000\002"
					+ "\056\003\000\002\056\005\000\002\056\005\000\002\056"
					+ "\003\000\002\056\006\000\002\024\003\000\002\024\002"
					+ "\000\002\025\005\000\002\025\003\000\002\043\004\000"
					+ "\002\044\005\000\002\044\002\000\002\045\004\000\002"
					+ "\046\005\000\002\046\002\000\002\047\003\000\002\047"
					+ "\005\000\002\051\004\000\002\037\004\000\002\037\002"
					+ "\000\002\040\004\000\002\040\005\000\002\032\003\000"
					+ "\002\032\003\000\002\032\003\000\002\032\003\000\002"
					+ "\032\003\000\002\032\003\000\002\030\003\000\002\030"
					+ "\003\000\002\031\003\000\002\031\003\000\002\031\003" + "" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(
			new String[] { "\000\273\000\004\004\005\001\002\000\004\002\275\001"
					+ "\002\000\004\054\006\001\002\000\012\006\ufffe\022\ufffe"
					+ "\027\ufffe\054\ufffe\001\002\000\012\006\ufffc\022\ufffc\027"
					+ "\ufffc\054\ufffc\001\002\000\012\006\020\022\021\027\001"
					+ "\054\012\001\002\000\004\054\265\001\002\000\070\005"
					+ "\uffe1\007\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1"
					+ "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\035"
					+ "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1"
					+ "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054"
					+ "\uffe1\001\002\000\004\027\262\001\002\000\012\006\ufffa"
					+ "\022\ufffa\027\ufffa\054\ufffa\001\002\000\012\006\ufff9\022"
					+ "\ufff9\027\ufff9\054\ufff9\001\002\000\012\006\ufffd\022\ufffd"
					+ "\027\ufffd\054\ufffd\001\002\000\012\006\ufffb\022\ufffb\027"
					+ "\ufffb\054\ufffb\001\002\000\004\054\042\001\002\000\004"
					+ "\054\012\001\002\000\004\054\023\001\002\000\004\034"
					+ "\ufff8\001\002\000\004\034\025\001\002\000\010\055\027"
					+ "\056\031\057\026\001\002\000\006\031\ufff3\032\ufff3\001"
					+ "\002\000\006\031\ufff5\032\ufff5\001\002\000\006\031\ufff0"
					+ "\032\ufff0\001\002\000\006\031\ufff4\032\ufff4\001\002\000"
					+ "\006\031\ufff7\032\033\001\002\000\004\054\036\001\002"
					+ "\000\004\031\035\001\002\000\012\006\ufff6\022\ufff6\027"
					+ "\ufff6\054\ufff6\001\002\000\004\034\ufff2\001\002\000\004"
					+ "\034\040\001\002\000\010\055\027\056\031\057\026\001"
					+ "\002\000\006\031\ufff1\032\ufff1\001\002\000\006\020\044"
					+ "\027\uffe2\001\002\000\004\027\046\001\002\000\004\054"
					+ "\012\001\002\000\004\027\uffe3\001\002\000\010\027\uffe7"
					+ "\030\uffe7\054\uffe7\001\002\000\010\027\uffee\030\uffee\054"
					+ "\uffee\001\002\000\010\027\052\030\uffe4\054\012\001\002"
					+ "\000\004\030\261\001\002\000\010\015\uffdf\030\uffdf\054"
					+ "\uffdf\001\002\000\010\027\uffef\030\uffef\054\uffef\001\002"
					+ "\000\010\015\060\030\056\054\012\001\002\000\004\054"
					+ "\uffda\001\002\000\004\030\uffe5\001\002\000\010\015\uffe0"
					+ "\030\uffe0\054\uffe0\001\002\000\004\054\uffd9\001\002\000"
					+ "\004\054\062\001\002\000\004\023\uffde\001\002\000\004"
					+ "\023\064\001\002\000\006\024\uffd7\054\012\001\002\000"
					+ "\004\054\255\001\002\000\006\024\uffd8\032\253\001\002"
					+ "\000\004\024\071\001\002\000\006\024\uffd5\032\uffd5\001"
					+ "\002\000\006\027\uffdd\054\uffdd\001\002\000\006\027\uffee"
					+ "\054\uffee\001\002\000\006\027\074\054\012\001\002\000"
					+ "\026\005\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc"
					+ "\021\uffdc\027\uffdc\030\uffdc\054\uffdc\001\002\000\026\005"
					+ "\uffd2\007\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\021\uffd2"
					+ "\027\uffd2\030\uffd2\054\uffd2\001\002\000\026\005\115\007"
					+ "\104\012\107\013\077\014\112\016\113\021\111\027\100"
					+ "\030\114\054\101\001\002\000\004\023\247\001\002\000"
					+ "\024\005\115\007\104\012\107\013\077\014\112\016\113"
					+ "\021\111\027\100\054\101\001\002\000\102\005\uffa1\007"
					+ "\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\021\uffa1\023\uffa1"
					+ "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\032\uffa1\033"
					+ "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1"
					+ "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050"
					+ "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\001\002\000\030"
					+ "\005\uffd0\007\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017"
					+ "\uffd0\021\uffd0\027\uffd0\030\uffd0\054\uffd0\001\002\000\012"
					+ "\023\232\034\227\044\226\045\231\001\002\000\016\011"
					+ "\122\023\135\054\101\055\125\056\133\057\130\001\002"
					+ "\000\026\005\uffd3\007\uffd3\012\uffd3\013\uffd3\014\uffd3\016"
					+ "\uffd3\021\uffd3\027\uffd3\030\uffd3\054\uffd3\001\002\000\004"
					+ "\031\217\001\002\000\004\023\213\001\002\000\030\005"
					+ "\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1"
					+ "\021\uffd1\027\uffd1\030\uffd1\054\uffd1\001\002\000\004\031"
					+ "\212\001\002\000\020\011\122\023\135\031\210\054\101"
					+ "\055\125\056\133\057\130\001\002\000\024\005\115\007"
					+ "\104\012\107\013\077\014\112\016\113\021\111\027\100"
					+ "\054\101\001\002\000\010\015\uffdb\030\uffdb\054\uffdb\001"
					+ "\002\000\004\031\116\001\002\000\032\005\uffca\007\uffca"
					+ "\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca\021"
					+ "\uffca\027\uffca\030\uffca\054\uffca\001\002\000\004\017\120"
					+ "\001\002\000\004\023\121\001\002\000\016\011\122\023"
					+ "\135\054\101\055\125\056\133\057\130\001\002\000\004"
					+ "\054\012\001\002\000\030\024\uffa5\035\140\036\141\042"
					+ "\uffa5\043\uffa5\046\173\047\176\050\177\051\172\052\174"
					+ "\053\200\001\002\000\070\005\uffb1\007\uffb1\012\uffb1\013"
					+ "\uffb1\014\uffb1\016\uffb1\021\uffb1\023\163\024\uffb1\026\uffb1"
					+ "\027\uffb1\031\uffb1\032\uffb1\035\uffb1\036\uffb1\037\uffb1\040"
					+ "\uffb1\041\uffb1\042\uffb1\043\uffb1\046\uffb1\047\uffb1\050\uffb1"
					+ "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\001\002\000\066\005"
					+ "\uffb6\007\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\021\uffb6"
					+ "\024\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\035\uffb6\036"
					+ "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6"
					+ "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\001"
					+ "\002\000\004\024\161\001\002\000\010\024\uffa6\042\uffa6"
					+ "\043\uffa6\001\002\000\066\005\uffb4\007\uffb4\012\uffb4\013"
					+ "\uffb4\014\uffb4\016\uffb4\021\uffb4\024\uffb4\026\uffb4\027\uffb4"
					+ "\031\uffb4\032\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041"
					+ "\uffb4\042\uffb4\043\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4"
					+ "\052\uffb4\053\uffb4\054\uffb4\001\002\000\060\005\uffbd\007"
					+ "\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\021\uffbd\024\uffbd"
					+ "\026\uffbd\027\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\042"
					+ "\uffbd\043\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd"
					+ "\053\uffbd\054\uffbd\001\002\000\066\005\uffbc\007\uffbc\012"
					+ "\uffbc\013\uffbc\014\uffbc\016\uffbc\021\uffbc\024\uffbc\026\uffbc"
					+ "\027\uffbc\031\uffbc\032\uffbc\035\uffbc\036\uffbc\037\uffbc\040"
					+ "\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc\047\uffbc\050\uffbc"
					+ "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\066\005"
					+ "\uffb5\007\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\021\uffb5"
					+ "\024\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\035\uffb5\036"
					+ "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\046\uffb5"
					+ "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\001"
					+ "\002\000\006\024\uffa9\043\uffa9\001\002\000\016\011\122"
					+ "\023\135\054\101\055\125\056\133\057\130\001\002\000"
					+ "\010\024\137\035\140\036\141\001\002\000\066\005\uffb2"
					+ "\007\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\021\uffb2\024"
					+ "\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2\035\uffb2\036\uffb2"
					+ "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2\047"
					+ "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001\002"
					+ "\000\016\011\uff98\023\uff98\054\uff98\055\uff98\056\uff98\057"
					+ "\uff98\001\002\000\016\011\uff97\023\uff97\054\uff97\055\uff97"
					+ "\056\uff97\057\uff97\001\002\000\016\011\122\023\135\054"
					+ "\101\055\125\056\133\057\130\001\002\000\060\005\uffbe"
					+ "\007\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\021\uffbe\024"
					+ "\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe"
					+ "\042\uffbe\043\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052"
					+ "\uffbe\053\uffbe\054\uffbe\001\002\000\006\024\uffab\043\145"
					+ "\001\002\000\016\011\122\023\135\054\101\055\125\056"
					+ "\133\057\130\001\002\000\006\024\uffaa\043\uffaa\001\002"
					+ "\000\066\005\uffb9\007\uffb9\012\uffb9\013\uffb9\014\uffb9\016"
					+ "\uffb9\021\uffb9\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9"
					+ "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043"
					+ "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9"
					+ "\054\uffb9\001\002\000\066\005\uffbb\007\uffbb\012\uffbb\013"
					+ "\uffbb\014\uffbb\016\uffbb\021\uffbb\024\uffbb\026\uffbb\027\uffbb"
					+ "\031\uffbb\032\uffbb\035\uffbb\036\uffbb\037\152\040\153\041"
					+ "\151\042\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb"
					+ "\052\uffbb\053\uffbb\054\uffbb\001\002\000\016\011\uff94\023"
					+ "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\001\002\000\016"
					+ "\011\uff96\023\uff96\054\uff96\055\uff96\056\uff96\057\uff96\001"
					+ "\002\000\016\011\uff95\023\uff95\054\uff95\055\uff95\056\uff95"
					+ "\057\uff95\001\002\000\016\011\122\023\135\054\101\055"
					+ "\125\056\133\057\130\001\002\000\066\005\uffba\007\uffba"
					+ "\012\uffba\013\uffba\014\uffba\016\uffba\021\uffba\024\uffba\026"
					+ "\uffba\027\uffba\031\uffba\032\uffba\035\uffba\036\uffba\037\uffba"
					+ "\040\uffba\041\uffba\042\uffba\043\uffba\046\uffba\047\uffba\050"
					+ "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\001\002\000\010"
					+ "\024\uffa8\042\157\043\uffa8\001\002\000\016\011\122\023"
					+ "\135\054\101\055\125\056\133\057\130\001\002\000\010"
					+ "\024\uffa7\042\uffa7\043\uffa7\001\002\000\004\031\162\001"
					+ "\002\000\032\005\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb"
					+ "\014\uffcb\016\uffcb\017\uffcb\021\uffcb\027\uffcb\030\uffcb\054"
					+ "\uffcb\001\002\000\020\011\122\023\135\024\uffae\054\101"
					+ "\055\125\056\133\057\130\001\002\000\004\024\171\001"
					+ "\002\000\014\024\uffac\026\uffac\032\uffac\035\140\036\141"
					+ "\001\002\000\010\024\uffaf\026\uffaf\032\167\001\002\000"
					+ "\016\011\122\023\135\054\101\055\125\056\133\057\130"
					+ "\001\002\000\014\024\uffad\026\uffad\032\uffad\035\140\036"
					+ "\141\001\002\000\066\005\uffb0\007\uffb0\012\uffb0\013\uffb0"
					+ "\014\uffb0\016\uffb0\021\uffb0\024\uffb0\026\uffb0\027\uffb0\031"
					+ "\uffb0\032\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0"
					+ "\042\uffb0\043\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052"
					+ "\uffb0\053\uffb0\054\uffb0\001\002\000\016\011\uff99\023\uff99"
					+ "\054\uff99\055\uff99\056\uff99\057\uff99\001\002\000\016\011"
					+ "\uff9c\023\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002"
					+ "\000\016\011\uff9e\023\uff9e\054\uff9e\055\uff9e\056\uff9e\057"
					+ "\uff9e\001\002\000\016\011\122\023\135\054\101\055\125"
					+ "\056\133\057\130\001\002\000\016\011\uff9b\023\uff9b\054"
					+ "\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000\016\011\uff9a"
					+ "\023\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000"
					+ "\016\011\uff9d\023\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d"
					+ "\001\002\000\014\024\uffa4\035\140\036\141\042\uffa4\043"
					+ "\uffa4\001\002\000\070\005\uffb7\007\uffb7\012\uffb7\013\uffb7"
					+ "\014\uffb7\016\uffb7\021\uffb7\024\uffb7\025\204\026\uffb7\027"
					+ "\uffb7\031\uffb7\032\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7"
					+ "\041\uffb7\042\uffb7\043\uffb7\046\uffb7\047\uffb7\050\uffb7\051"
					+ "\uffb7\052\uffb7\053\uffb7\054\uffb7\001\002\000\066\005\uffb3"
					+ "\007\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\021\uffb3\024"
					+ "\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\035\uffb3\036\uffb3"
					+ "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\046\uffb3\047"
					+ "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\001\002"
					+ "\000\020\011\122\023\135\026\uffae\054\101\055\125\056"
					+ "\133\057\130\001\002\000\004\026\206\001\002\000\066"
					+ "\005\uffb8\007\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\021"
					+ "\uffb8\024\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\035\uffb8"
					+ "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\046"
					+ "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8"
					+ "\001\002\000\010\031\211\035\140\036\141\001\002\000"
					+ "\032\005\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8"
					+ "\016\uffc8\017\uffc8\021\uffc8\027\uffc8\030\uffc8\054\uffc8\001"
					+ "\002\000\032\005\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7"
					+ "\014\uffc7\016\uffc7\017\uffc7\021\uffc7\027\uffc7\030\uffc7\054"
					+ "\uffc7\001\002\000\032\005\uffc9\007\uffc9\010\uffc9\012\uffc9"
					+ "\013\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\027\uffc9\030"
					+ "\uffc9\054\uffc9\001\002\000\016\011\122\023\135\054\101"
					+ "\055\125\056\133\057\130\001\002\000\010\024\215\035"
					+ "\140\036\141\001\002\000\004\031\216\001\002\000\032"
					+ "\005\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\016"
					+ "\uffc5\017\uffc5\021\uffc5\027\uffc5\030\uffc5\054\uffc5\001\002"
					+ "\000\032\005\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014"
					+ "\uffcd\016\uffcd\017\uffcd\021\uffcd\027\uffcd\030\uffcd\054\uffcd"
					+ "\001\002\000\030\005\115\007\104\012\107\013\077\014"
					+ "\112\016\113\021\111\027\100\035\140\036\141\054\101"
					+ "\001\002\000\030\005\uffcf\007\uffcf\012\uffcf\013\uffcf\014"
					+ "\uffcf\016\uffcf\017\uffcf\021\uffcf\027\uffcf\030\uffcf\054\uffcf"
					+ "\001\002\000\032\005\uffd1\007\uffd1\010\223\012\uffd1\013"
					+ "\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\027\uffd1\030\uffd1"
					+ "\054\uffd1\001\002\000\024\005\115\007\104\012\107\013"
					+ "\077\014\112\016\113\021\111\027\100\054\101\001\002"
					+ "\000\030\005\uffce\007\uffce\012\uffce\013\uffce\014\uffce\016"
					+ "\uffce\017\uffce\021\uffce\027\uffce\030\uffce\054\uffce\001\002"
					+ "\000\032\005\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014"
					+ "\uffcc\016\uffcc\017\uffcc\021\uffcc\027\uffcc\030\uffcc\054\uffcc"
					+ "\001\002\000\004\031\uffc0\001\002\000\016\011\122\023"
					+ "\135\054\101\055\125\056\133\057\130\001\002\000\004"
					+ "\031\uffc3\001\002\000\004\031\uffbf\001\002\000\020\011"
					+ "\122\023\135\024\uffae\054\101\055\125\056\133\057\130"
					+ "\001\002\000\004\024\234\001\002\000\004\031\uffc1\001"
					+ "\002\000\010\031\uffc2\035\140\036\141\001\002\000\102"
					+ "\005\uffa3\007\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\021"
					+ "\uffa3\023\uffa3\024\uffa3\025\237\026\uffa3\027\uffa3\031\uffa3"
					+ "\032\uffa3\033\240\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040"
					+ "\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3"
					+ "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\001"
					+ "\002\000\016\011\122\023\135\054\101\055\125\056\133"
					+ "\057\130\001\002\000\004\054\242\001\002\000\102\005"
					+ "\uffa2\007\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\021\uffa2"
					+ "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\032"
					+ "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2"
					+ "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047"
					+ "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002"
					+ "\000\102\005\uffa0\007\uffa0\012\uffa0\013\uffa0\014\uffa0\016"
					+ "\uffa0\021\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0"
					+ "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037"
					+ "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0"
					+ "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054"
					+ "\uffa0\001\002\000\010\026\244\035\140\036\141\001\002"
					+ "\000\102\005\uff9f\007\uff9f\012\uff9f\013\uff9f\014\uff9f\016"
					+ "\uff9f\021\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f"
					+ "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037"
					+ "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f"
					+ "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054"
					+ "\uff9f\001\002\000\004\030\246\001\002\000\032\005\uffc4"
					+ "\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017"
					+ "\uffc4\021\uffc4\027\uffc4\030\uffc4\054\uffc4\001\002\000\004"
					+ "\054\101\001\002\000\004\024\251\001\002\000\004\031"
					+ "\252\001\002\000\032\005\uffc6\007\uffc6\010\uffc6\012\uffc6"
					+ "\013\uffc6\014\uffc6\016\uffc6\017\uffc6\021\uffc6\027\uffc6\030"
					+ "\uffc6\054\uffc6\001\002\000\004\054\012\001\002\000\006"
					+ "\024\uffd6\032\uffd6\001\002\000\010\024\uffe8\025\257\032"
					+ "\uffe8\001\002\000\006\024\uffd4\032\uffd4\001\002\000\004"
					+ "\026\260\001\002\000\010\024\uffe9\031\uffe9\032\uffe9\001"
					+ "\002\000\012\006\uffe6\022\uffe6\027\uffe6\054\uffe6\001\002"
					+ "\000\010\015\uffdf\030\uffdf\054\uffdf\001\002\000\010\015"
					+ "\060\030\264\054\012\001\002\000\004\002\000\001\002"
					+ "\000\010\025\257\031\uffe8\032\uffe8\001\002\000\006\031"
					+ "\uffed\032\uffed\001\002\000\006\031\uffea\032\uffea\001\002"
					+ "\000\006\031\272\032\271\001\002\000\004\054\273\001"
					+ "\002\000\014\006\uffec\022\uffec\027\uffec\030\uffec\054\uffec"
					+ "\001\002\000\010\025\257\031\uffe8\032\uffe8\001\002\000"
					+ "\006\031\uffeb\032\uffeb\001\002\000\004\002\uffff\001\002" + "" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(
			new String[] { "\000\273\000\004\002\003\001\001\000\002\001\001\000"
					+ "\004\050\006\001\001\000\002\001\001\000\004\003\007"
					+ "\001\001\000\016\004\015\006\013\010\014\016\016\052"
					+ "\010\057\012\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
					+ "\052\021\001\001\000\002\001\001\000\004\060\023\001"
					+ "\001\000\002\001\001\000\004\020\027\001\001\000\002"
					+ "\001\001\000\002\001\001\000\004\017\031\001\001\000"
					+ "\002\001\001\000\004\061\033\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\062\036\001"
					+ "\001\000\002\001\001\000\004\020\040\001\001\000\002"
					+ "\001\001\000\004\011\042\001\001\000\002\001\001\000"
					+ "\004\052\044\001\001\000\002\001\001\000\004\064\046"
					+ "\001\001\000\004\005\047\001\001\000\010\006\052\012"
					+ "\050\052\010\001\001\000\002\001\001\000\004\014\053"
					+ "\001\001\000\002\001\001\000\010\015\056\052\054\053"
					+ "\060\001\001\000\002\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\004\065"
					+ "\062\001\001\000\002\001\001\000\012\021\065\022\067"
					+ "\023\066\052\064\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\004\066\071"
					+ "\001\001\000\004\005\072\001\001\000\006\006\052\052"
					+ "\010\001\001\000\004\067\074\001\001\000\004\026\075"
					+ "\001\001\000\014\027\104\033\101\034\107\035\105\051"
					+ "\102\001\001\000\002\001\001\000\014\027\244\033\101"
					+ "\034\107\035\105\051\102\001\001\000\004\037\235\001"
					+ "\001\000\002\001\001\000\004\036\227\001\001\000\012"
					+ "\051\123\054\130\055\217\056\131\001\001\000\002\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\012\051\123\054\130\055\206\056"
					+ "\131\001\001\000\014\027\116\033\101\034\107\035\105"
					+ "\051\102\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\020"
					+ "\043\125\045\133\047\126\051\123\054\130\055\122\056"
					+ "\131\001\001\000\004\052\201\001\001\000\006\030\141"
					+ "\032\174\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\004\046\155\001\001\000\002\001\001"
					+ "\000\002\001\001\000\004\070\146\001\001\000\002\001"
					+ "\001\000\004\044\143\001\001\000\012\051\123\054\130"
					+ "\055\135\056\131\001\001\000\004\030\141\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\010"
					+ "\051\123\054\142\056\131\001\001\000\002\001\001\000"
					+ "\002\001\001\000\016\045\145\047\126\051\123\054\130"
					+ "\055\122\056\131\001\001\000\002\001\001\000\004\041"
					+ "\147\001\001\000\004\031\153\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\006\051\123\056"
					+ "\154\001\001\000\002\001\001\000\002\001\001\000\014"
					+ "\047\157\051\123\054\130\055\122\056\131\001\001\000"
					+ "\002\001\001\000\002\001\001\000\002\001\001\000\016"
					+ "\024\163\025\165\051\123\054\130\055\164\056\131\001"
					+ "\001\000\002\001\001\000\004\030\141\001\001\000\002"
					+ "\001\001\000\012\051\123\054\130\055\167\056\131\001"
					+ "\001\000\004\030\141\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\002\001\001\000\012\051"
					+ "\123\054\130\055\200\056\131\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\030\141\001"
					+ "\001\000\004\042\202\001\001\000\002\001\001\000\016"
					+ "\024\204\025\165\051\123\054\130\055\164\056\131\001"
					+ "\001\000\002\001\001\000\002\001\001\000\004\030\141"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\012\051\123\054\130\055\213\056\131\001\001"
					+ "\000\004\030\141\001\001\000\002\001\001\000\002\001"
					+ "\001\000\002\001\001\000\016\027\220\030\141\033\101"
					+ "\034\221\035\105\051\102\001\001\000\002\001\001\000"
					+ "\002\001\001\000\012\033\223\034\224\035\105\051\102"
					+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
					+ "\001\000\012\051\123\054\130\055\234\056\131\001\001"
					+ "\000\002\001\001\000\002\001\001\000\016\024\232\025"
					+ "\165\051\123\054\130\055\164\056\131\001\001\000\002"
					+ "\001\001\000\002\001\001\000\004\030\141\001\001\000"
					+ "\004\040\240\001\001\000\012\051\123\054\130\055\242"
					+ "\056\131\001\001\000\002\001\001\000\002\001\001\000"
					+ "\002\001\001\000\004\030\141\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\051\247\001"
					+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
					+ "\000\006\022\253\052\064\001\001\000\002\001\001\000"
					+ "\004\013\255\001\001\000\002\001\001\000\002\001\001"
					+ "\000\002\001\001\000\002\001\001\000\004\014\262\001"
					+ "\001\000\010\015\056\052\054\053\060\001\001\000\002"
					+ "\001\001\000\004\013\265\001\001\000\004\063\266\001"
					+ "\001\000\004\007\267\001\001\000\002\001\001\000\002"
					+ "\001\001\000\002\001\001\000\004\013\273\001\001\000" + "\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$MJParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$MJParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack,
			int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 2;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	public void user_init() throws java.lang.Exception {

		Tab.init(); // Universe scope
		boolType = new Struct(Struct.Bool);
		Obj boolObj = new Obj(Obj.Type, "bool", boolType);
		Tab.currentScope().addToLocals(boolObj);

	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		Symbol s = this.getScanner().next_token();
		if (s != null && s.value != null)
			log.info(s.toString() + " " + s.value.toString());
		return s;

	}

	int printCallCount = 0;
	boolean errorDetected = false;

	Struct boolType;

	int globalConstCount = 0;
	int globalVarCount = 0;

	Logger log = Logger.getLogger(getClass());

	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("\nSintaksna greska", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}

	public void report_error(String message, Object info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol) info).left);
		log.error(msg.toString());
	}

	public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol) info).left);
		log.info(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$MJParser$actions {

	boolean globalScope = false;
	boolean constDecl = false;
	boolean returnFound = false;
	Obj currentMethod = null;
	Obj currentClass = null;
	Struct currentType = null;
	Struct listDeclType = Tab.nullType;
	boolean isArrayType = false;

	boolean isFirstDeclaration(String name, int line) {
		if (Tab.currentScope.findSymbol(name) == null)
			return true;
		else {
			parser.report_error("Greska na liniji " + line + " - promenljiva " + name + " je vec deklarisana", null);
			return false;
		}
	}

	private final MJParser parser;

	/** Constructor */
	CUP$MJParser$actions(MJParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$MJParser$do_action(int CUP$MJParser$act_num,
			java_cup.runtime.lr_parser CUP$MJParser$parser, java.util.Stack CUP$MJParser$stack, int CUP$MJParser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$MJParser$result;

		/* select the action based on the action number */
		switch (CUP$MJParser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 109: // Mulop ::= MOD
		{
			Object RESULT = null;
			RESULT = Code.mul;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop", 23,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 108: // Mulop ::= DIV
		{
			Object RESULT = null;
			RESULT = Code.div;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop", 23,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 107: // Mulop ::= MUL
		{
			Object RESULT = null;
			RESULT = Code.mul;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop", 23,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 106: // Addop ::= MINUS
		{
			Object RESULT = null;
			RESULT = Code.sub;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop", 22,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 105: // Addop ::= PLUS
		{
			Object RESULT = null;
			RESULT = Code.add;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop", 22,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 104: // Relop ::= LESS_OR_EQUAL
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 103: // Relop ::= LESS
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 102: // Relop ::= GREATER_OR_EQUAL
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 101: // Relop ::= GREATER
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 100: // Relop ::= NOT_EQUAL
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 99: // Relop ::= IS_EQUAL
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop", 24,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 98: // DesignatorMod ::= LBRACKET Expr RBRACKET
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorMod", 30,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 97: // DesignatorMod ::= DOT IDENT
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorMod", 30,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 96: // DesignatorModList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorModList", 29,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 95: // DesignatorModList ::= DesignatorModList DesignatorMod
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorModList", 29,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 94: // Designator ::= IDENT DesignatorModList
		{
			Obj RESULT = null;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

			Obj obj = Tab.find(name);
			if (obj == Tab.noObj) {
				parser.report_error("Greska na liniji " + nameleft + " : ime " + name + " nije deklarisano! ", null);
			}
			RESULT = obj;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator", 39,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 93: // CondFact ::= Expr Relop Expr
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact", 37,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 92: // CondFact ::= Expr
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact", 37,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 91: // CondFactList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList", 36,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // CondFactList ::= CondFactList LOGICAL_AND CondFact
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactList", 36,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // CondTerm ::= CondFact CondFactList
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm", 35,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // CondTermList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList", 34,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // CondTermList ::= CondTermList LOGICAL_OR CondTerm
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermList", 34,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // Condition ::= CondTerm CondTermList
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition", 33,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // ActualParamList ::= Expr
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList", 19,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // ActualParamList ::= ActualParamList COMMA Expr
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList", 19,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // ActualPars ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars", 18,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // ActualPars ::= ActualParamList
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars", 18,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // Factor ::= Designator LPAREN ActualPars RPAREN
		{
			Struct RESULT = null;
			int funcleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
			int funcright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
			Obj func = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;

			if (Obj.Meth == func.getKind()) {
				parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
				if (func.getType() == Tab.noType) {
					parser.report_error(
							"Semanticka greska " + func.getName()
									+ " ne moze se koristiti u izrazima jer nema povratnu vrednost, linija " + funcleft,
							null);
				} else {
					int destAdr = func.getAdr() - Code.pc;
					Code.put(Code.call);
					Code.put2(destAdr);
				}
				RESULT = func.getType();
			} else {
				parser.report_error("Greska na liniji " + funcleft + " : ime " + func.getName() + " nije funkcija!",
						null);
				RESULT = Tab.noType;
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // Factor ::= Designator
		{
			Struct RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int dright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Obj d = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			RESULT = d.getType();
			Code.load(d);

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // Factor ::= LPAREN Expr RPAREN
		{
			Struct RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // Factor ::= NEW Type ArrayBracketsWithArg
		{
			Struct RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // Factor ::= BOOL_CONST
		{
			Struct RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // Factor ::= CHAR_CONST
		{
			Struct RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // Factor ::= NUM_CONST
		{
			Struct RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			Obj c = Tab.insert(Obj.Con, "", Tab.intType);
			c.setAdr(i.intValue());
			Code.load(c);
			RESULT = Tab.intType;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor", 44,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // ArrayBracketsWithArg ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayBracketsWithArg", 32,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // ArrayBracketsWithArg ::= LBRACKET ActualPars RBRACKET
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayBracketsWithArg", 32,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // FactorMulopList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorMulopList", 31,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // FactorMulopList ::= FactorMulopList Mulop Factor
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorMulopList", 31,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // Term ::= Factor NT$9 FactorMulopList
		{
			Struct RESULT = null;
			// propagate RESULT from NT$9
			RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term", 42,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // NT$9 ::=
		{
			Struct RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			RESULT = t;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9", 54,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // Expr ::= Term
		{
			Struct RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			RESULT = t;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr", 43,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // Expr ::= Expr Addop Term
		{
			Struct RESULT = null;
			int teleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int teright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			Struct te = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (te.equals(t) && te == Tab.intType)
				RESULT = te;
			else {
				parser.report_error("Greska na liniji " + teleft + " : nekompatibilni tipovi u izrazu za sabiranje.",
						null);
				RESULT = Tab.noType;
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr", 43,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // DesignatorStatementOp ::= DEC
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOp", 28,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // DesignatorStatementOp ::= INC
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOp", 28,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // DesignatorStatementOp ::= LPAREN ActualPars RPAREN
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOp", 28,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // DesignatorStatementOp ::= EQUAL Expr
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOp", 28,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // DesignatorStatement ::= Designator DesignatorStatementOp
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement", 27,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // Matched ::= LBRACE Statement RBRACE
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // Matched ::= PRINT LPAREN Expr RPAREN SEMI
		{
			Object RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;

			parser.printCallCount++;
			if (t != Tab.intType && t != Tab.charType)
				parser.report_error("Semanticka greska na liniji " + tleft
						+ ": Operand instrukcije PRINT mora biti char ili int tipa ", null);
			if (t == Tab.intType) {
				Code.loadConst(5);
				Code.put(Code.print);
			}

			if (t == Tab.charType) {
				Code.loadConst(1);
				Code.put(Code.bprint);
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // Matched ::= READ LPAREN Designator RPAREN SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // Matched ::= RETURN Expr SEMI
		{
			Object RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Struct t = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

			returnFound = true;
			Struct currMethType = currentMethod.getType();
			if (!currMethType.compatibleWith(t)) {
				parser.report_error("Greska na liniji " + tleft + " : "
						+ "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije "
						+ currentMethod.getName(), null);
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // Matched ::= RETURN SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // Matched ::= CONTINUE SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // Matched ::= BREAK SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // Matched ::= DO Statement WHILE LPAREN Condition RPAREN SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // Matched ::= IF Expr Matched ELSE Matched
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // Matched ::= DesignatorStatement SEMI
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched", 26,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // Unmatched ::= IF Expr Matched ELSE Unmatched
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched", 25,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // Unmatched ::= IF Expr Statement
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched", 25,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // Statement ::= Unmatched
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement", 21,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // Statement ::= Matched
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement", 21,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // StatementList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList", 20,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // StatementList ::= StatementList Statement
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList", 20,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // FormalParamDecl ::= Type IDENT ArrayBrackets
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

			if (isFirstDeclaration(name, nameleft) && type != Tab.nullType) {
				Struct methType = type;
				if (isArrayType) {
					methType = new Struct(Struct.Array, type);
				}
				Tab.insert(Obj.Var, name, methType);
				parser.report_info("Formalni parametar " + name, null);
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl", 16,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // FormalParamList ::= FormalParamDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList", 15,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // FormalParamList ::= FormalParamList COMMA FormalParamDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList", 15,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // FormPars ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars", 17,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // FormPars ::= FormalParamList
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars", 17,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // MethType ::= VOID
		{
			Struct RESULT = null;

			RESULT = Tab.noType;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethType", 41,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // MethType ::= Type
		{
			Struct RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			RESULT = type;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethType", 41,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // MethodDecl ::= MethType IDENT NT$6 LPAREN FormPars RPAREN NT$7 VarDeclList
					// LBRACE NT$8 StatementList RBRACE
		{
			Object RESULT = null;
			// propagate RESULT from NT$8
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int retTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)).left;
			int retTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)).right;
			Struct retType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 11)).value;
			int methNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 10)).left;
			int methNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 10)).right;
			String methName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 10)).value;

			if (!returnFound && retType != Tab.noType)
				parser.report_error(
						"Semanticka greska na liniji " + methNameleft + ": funcija " + methName + " nema return iskaz!",
						null);

			Code.put(Code.exit);
			Code.put(Code.return_);

			Tab.chainLocalSymbols(currentMethod);
			Tab.closeScope();

			returnFound = false;
			currentMethod = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl", 11,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 11)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // NT$8 ::=
		{
			Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 2)).value;
			int retTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)).left;
			int retTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)).right;
			Struct retType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 8)).value;
			int methNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).left;
			int methNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).right;
			String methName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 7)).value;

			currentMethod.setAdr(Code.pc);
			if ("main".equals(methName)) {
				Code.mainPc = currentMethod.getAdr();
			}
			Code.put(Code.enter);
			Code.put(currentMethod.getLevel());
			Code.put(Tab.currentScope().getnVars());

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8", 53,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // NT$7 ::=
		{
			Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 3)).value;
			int retTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
			int retTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
			Struct retType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 5)).value;
			int methNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).left;
			int methNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).right;
			String methName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 4)).value;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7", 52,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // NT$6 ::=
		{
			Object RESULT = null;
			int retTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int retTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Struct retType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 1)).value;
			int methNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int methNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			String methName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (isFirstDeclaration(methName, methNameleft) && retType != Tab.nullType) {
				currentMethod = Tab.insert(Obj.Meth, methName, (Struct) retType);
				parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
				Tab.openScope();
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6", 51,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // MethodDeclList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList", 10,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // MethodDeclList ::= MethodDeclList MethodDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList", 10,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // Type ::= IDENT
		{
			Struct RESULT = null;
			int typeNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int typeNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			String typeName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
				RESULT = Tab.noType;
			} else {
				if (Obj.Type == typeNode.getKind()) {
					RESULT = typeNode.getType();
				} else {
					parser.report_error(
							"Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ", null);
					RESULT = Tab.noType;
				}
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type", 40,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // ExtendsDecl ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsDecl", 7,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // ExtendsDecl ::= EXTENDS Type
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (type.getKind() == Struct.Class)
				RESULT = type;
			else {
				parser.report_info("Greska na liniji " + typeleft + " extends tip nije klasa", null);
				RESULT = Tab.nullType;
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsDecl", 7,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // ClassMethodDeclList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclList", 8,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // ClassMethodDeclList ::= LBRACE MethodDeclList RBRACE
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclList", 8,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // ClassDecl ::= CLASS IDENT ExtendsDecl LBRACE NT$5 VarDeclList
					// ClassMethodDeclList RBRACE
		{
			Object RESULT = null;
			// propagate RESULT from NT$5
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
			Object type = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).value;

			globalScope = true;
			Tab.chainLocalSymbols(currentClass);
			Tab.closeScope();
			currentClass = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl", 6,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // NT$5 ::=
		{
			Object RESULT = null;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Object type = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;

			globalScope = false;
			if (isFirstDeclaration(name, nameleft) && type != Tab.nullType) {
				currentClass = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
				parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft, null);
				Tab.openScope();
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5", 50,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // ArrayBrackets ::=
		{
			Object RESULT = null;
			isArrayType = false;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayBrackets", 9,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // ArrayBrackets ::= LBRACKET RBRACKET
		{
			Object RESULT = null;
			isArrayType = true;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayBrackets", 9,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // VarAdditional ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarAdditional", 5,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // VarAdditional ::= VarAdditional COMMA IDENT ArrayBrackets
		{
			Object RESULT = null;
			int varNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int varNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			String varName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 1)).value;

			if (isFirstDeclaration(varName, varNameleft)) {
				Obj temp = Tab.find(varName);
				if (temp == Tab.noObj)
					parser.report_error("Promenljiva " + varName + " je vec bila deklarisana. Linija: " + varNameleft,
							null);
				else {
					Struct type = currentType;

					if (isArrayType)
						type = new Struct(Struct.Array, currentType);

					if (currentClass != null) {
						Tab.insert(Obj.Fld, varName, currentType);
						parser.report_info("Deklarisano polje klase " + currentClass.getName() + ":" + varName
								+ " na liniji " + varNameleft, null);
					} else {
						Tab.insert(Obj.Var, varName, currentType);
						parser.report_info("Deklarisana promenljiva " + varName + " na liniji " + varNameleft, null);
					}
				}
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarAdditional", 5,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // VarDecl ::= Type IDENT ArrayBrackets NT$4 VarAdditional SEMI
		{
			Object RESULT = null;
			// propagate RESULT from NT$4
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int varTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
			int varTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
			Struct varType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 5)).value;
			int varNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).left;
			int varNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).right;
			String varName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 4)).value;
			currentType = null;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl", 4,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // NT$4 ::=
		{
			Object RESULT = null;
			int varTypeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).left;
			int varTyperight = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).right;
			Struct varType = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 2)).value;
			int varNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int varNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			String varName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 1)).value;

			currentType = varType;
			if (isFirstDeclaration(varName, varNameleft)) {
				Obj temp = Tab.find(varName);
				if (temp == Tab.noObj)
					parser.report_error("Promenljiva " + varType + " je vec bila deklarisana. Linija: " + varNameleft,
							null);
				else {
					Struct type = varType;

					if (isArrayType)
						type = new Struct(Struct.Array, varType);
					if (currentClass != null) {
						Tab.insert(Obj.Fld, varName, varType);
						parser.report_info("Deklarisano polje klase " + currentClass.getName() + ":" + varName
								+ " na liniji " + varNameleft, null);
					} else {
						Tab.insert(Obj.Var, varName, varType);
						parser.report_info("Deklarisana promenljiva " + varName + " na liniji " + varNameleft, null);
					}
				}
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4", 49,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // VarDeclList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList", 3,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // VarDeclList ::= VarDeclList VarDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList", 3,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // ConstAssigment ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstAssigment", 13,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // ConstAssigment ::= ConstAssigment COMMA IDENT NT$3 EQUAL ConstValue
		{
			Object RESULT = null;
			// propagate RESULT from NT$3
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 2)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstAssigment", 13,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // NT$3 ::=
		{
			Object RESULT = null;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (isFirstDeclaration(name, nameleft) && listDeclType != Tab.nullType) {
				Obj temp = Tab.insert(Obj.Con, name, currentType);
				parser.report_info("Deklarisana konstanta " + name + " na liniji " + nameleft, null);
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3", 48,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // ConstValue ::= BOOL_CONST
		{
			Object RESULT = null;
			int bleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int bright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Boolean b = (Boolean) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (constDecl && globalScope)
				parser.globalConstCount++;
			RESULT = new Obj(Obj.Con, "boolValue", Tab.find("bool").getType(), b ? 1 : 0, 0);

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue", 14,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // ConstValue ::= CHAR_CONST
		{
			Object RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Character c = (Character) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (constDecl && globalScope)
				parser.globalConstCount++;
			RESULT = new Obj(Obj.Con, "charValue", Tab.charType, c, 0);

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue", 14,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // ConstValue ::= NUM_CONST
		{
			Object RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			Integer i = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			if (constDecl && globalScope)
				parser.globalConstCount++;
			RESULT = new Obj(Obj.Con, "numValue", Tab.intType, i, 0);
			// provera tipa

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue", 14,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // ConstDecl ::= CONST Type IDENT NT$1 EQUAL ConstValue ConstAssigment NT$2 SEMI
		{
			Object RESULT = null;
			// propagate RESULT from NT$2
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 7)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)).value;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl", 12,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 8)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // NT$2 ::=
		{
			Object RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 3)).value;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 4)).value;
			currentType = null;
			constDecl = false;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2", 47,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // NT$1 ::=
		{
			Object RESULT = null;
			int typeleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int typeright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Struct type = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
			int nameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int nameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			String name = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			constDecl = true;
			currentType = type;
			if (isFirstDeclaration(name, nameleft) && listDeclType != Tab.nullType) {
				Obj temp = Tab.insert(Obj.Con, name, type);
				parser.report_info("Deklarisana konstanta " + name + " na liniji " + nameleft, null);
			}

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1", 46,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // ProgDecl ::= ClassDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl", 2,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // ProgDecl ::= VarDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl", 2,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // ProgDecl ::= ConstDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDecl", 2,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // ProgDeclList ::=
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList", 1,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // ProgDeclList ::= ProgDeclList ProgDecl
		{
			Object RESULT = null;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgDeclList", 1,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // ProgName ::= IDENT
		{
			Obj RESULT = null;
			int pNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).left;
			int pNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).right;
			String pName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			Tab.openScope();

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName", 38,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // $START ::= Program EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
					.elementAt(CUP$MJParser$top - 1)).value;
			RESULT = start_val;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START", 0,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			/* ACCEPT */
			CUP$MJParser$parser.done_parsing();
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // Program ::= PROG ProgName ProgDeclList NT$0 LBRACE MethodDeclList RBRACE
		{
			Object RESULT = null;
			// propagate RESULT from NT$0
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 3)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).right;
			Obj p = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 5)).value;

			Code.dataSize = Tab.currentScope().getnVars();
			Tab.chainLocalSymbols(p);
			Tab.closeScope();
			globalScope = true;

			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program", 0,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 6)),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // NT$0 ::=
		{
			Object RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).right;
			Obj p = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top - 1)).value;
			globalScope = false;
			CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0", 45,
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
					((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()), RESULT);
		}
			return CUP$MJParser$result;

		/* . . . . . . */
		default:
			throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
