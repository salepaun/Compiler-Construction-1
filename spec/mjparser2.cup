package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.util.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.MJParser.ScopeEnum;

// import java.io.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

parser code {:
	
	int printCallCount = 0;
	boolean errorDetected = false;

	Struct boolType;

	int globalConstCount = 0;
	int globalVarCount = 0;

	public enum ScopeEnum {
		GLOBAL,
		LOCAL,
		CLASS
	}

	Stack<ScopeEnum> scopeStack;

	Logger log = Logger.getLogger(getClass());
   

   	public boolean isCurrentScope(ScopeEnum type){
		   return type == scopeStack.peek();
	}

	public void push(ScopeEnum type){
		scopeStack.push(type);
	}

	public boolean popCheck(ScopeEnum type){
		if(scopeStack.isEmpty()) { report_error("Stack je prazan ", null);  return false;}
		ScopeEnum e = scopeStack.pop();
		if(e!=type){
			report_error("Ocekivan je " + type + " a nadjen " + e ,null);
			return false;
		}
		return true;
	}
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();	
	//if (s != null && s.value != null) 
	//	log.info(s.toString() + " " + s.value.toString() + " \t\tline: " + s.left);
	return s;
:}

init with {:
	Tab.init(); // Universe scope
	boolType = new Struct(Struct.Bool);
	Obj boolObj = new Obj(Obj.Type, "bool", boolType);
	Tab.currentScope().addToLocals(boolObj);
	scopeStack = new Stack<ScopeEnum>();
	scopeStack.push(ScopeEnum.GLOBAL);
:}

action code {:
	boolean constDecl = false;
	boolean returnFound = false;
	Obj currentMethod = null;
	Obj currentClass = null;
	Struct currentType = null;
	Struct listDeclType = Tab.nullType;
	boolean isArrayType = false;

	


	boolean isFirstDeclaration(String name, int line)
	{
		if(Tab.currentScope.findSymbol(name)==null)
			return true;
		else {
			parser.report_error("Greska na liniji " + line + " - promenljiva " + name + " je vec deklarisana", null);
			return false;
		}
	}
:}

terminal PROG;
terminal BREAK, CLASS, IF, ELSE, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;

terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal SEMI, COMMA, DOT;
terminal EQUAL, PLUS, MINUS, MUL, DIV, MOD, LOGICAL_AND, LOGICAL_OR, INC, DEC;
terminal GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, IS_EQUAL, NOT_EQUAL;

terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

non terminal Program, ProgDeclList, ProgDecl;
non terminal VarDeclList, VarDecl, VarAdditional;
non terminal ClassDecl, ExtendsDecl, ClassMethodDeclList;
non terminal ArrayBrackets;
non terminal MethodDeclList, MethodDecl;
non terminal ConstDecl, ConstAssigment;
non terminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
non terminal StatementList, Statement, Addop, Mulop, Relop;
non terminal Unmatched, Matched;
non terminal DesignatorStatement;
non terminal Condition, CondTerm, CondFact;
non terminal Obj ProgName, Designator, ConstValue;
non terminal Struct Type, MethType, Term, Expr, Factor;

Program ::= PROG ProgName:p ProgDeclList LBRACE MethodDeclList RBRACE 
{:
	Code.dataSize = Tab.currentScope().getnVars();
	Tab.chainLocalSymbols(p);
	Tab.closeScope(); 
:}
;

ProgName ::= IDENT:pName
{:  
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope(); 
:};

ProgDeclList ::= ProgDeclList ProgDecl
				 |
				 /* epsilon */
				 ;

ProgDecl ::= ConstDecl
			 |
			 VarDecl
			 |
			 ClassDecl
			 ;


ConstDecl ::= CONST Type:type IDENT:name
              {:
			  		constDecl = true;
					currentType = type;
					if(isFirstDeclaration(name, nameleft))
					{	
						Obj temp = Tab.insert(Obj.Con, name, type);
						parser.report_info("Deklarisana konstanta "+ name + " na liniji "+ nameleft, null);
					}
					listDeclType = type;
              :}
              EQUAL ConstValue:value 
			  {: 
					if(type!=value.getType())
					{
						parser.report_info("Greska tipovi se ne slazu, konstanta " + name + " : " + nameleft + " na liniji "+ nameleft, null);
					}
					else if (type.getKind() == Struct.Array){
						if(type.getElemType() != value.getType().getElemType()){
							parser.report_info("Greska tipovi se ne slazu niz, konstanta " + name + " : " + nameleft + " na liniji "+ nameleft, null);
						}
					}
			  :} 
			  ConstAssigment {: currentType = null; constDecl = false; :} SEMI;

ConstValue ::= NUM_CONST:i 
			   {:
			   		if(constDecl && parser.isCurrentScope(ScopeEnum.GLOBAL))
						parser.globalConstCount++; 
					RESULT = new Obj(Obj.Con, "numValue", Tab.intType, i, 0);
					// provera tipa
			   :}
			   |
			   CHAR_CONST:c 
			   {:
			   		if(constDecl && parser.isCurrentScope(ScopeEnum.GLOBAL))
						parser.globalConstCount++;
					RESULT = new Obj(Obj.Con, "charValue", Tab.charType, c, 0);
			   :}
			   |
			   BOOL_CONST:b
			   {:
			   		if(constDecl && parser.isCurrentScope(ScopeEnum.GLOBAL))
						parser.globalConstCount++;
					RESULT = new Obj(Obj.Con, "boolValue", Tab.find("bool").getType(), b?1:0, 0);
			   :}
			   ;

ConstAssigment ::= ConstAssigment COMMA IDENT:name
				   {:
				    	if(isFirstDeclaration(name, nameleft) && listDeclType != Tab.nullType)
						{	
							Obj temp = Tab.insert(Obj.Con, name, currentType);
							parser.report_info("Deklarisana konstanta "+ name+" na liniji "+ nameleft, null);
						}
				   :}
						
				   EQUAL ConstValue:value
				   {: 
						if(currentType!=value.getType())
						{
							parser.report_info("Greska tipovi se ne slazu, konstanta " + name + " : " + nameleft + " na liniji "+ nameleft, null);
						}
						else if (currentType.getKind() == Struct.Array){
							if(currentType.getElemType() != value.getType().getElemType()){
								parser.report_info("Greska tipovi se ne slazu niz, konstanta " + name + " : " + nameleft + " na liniji "+ nameleft, null);
							}
						}
			  	   :}  
				   |
				   /* epsilon */
				   ;

VarDeclList ::= VarDeclList VarDecl  
				|
				/* epsilon */ 
				;

VarDecl ::= Type:varType IDENT:varName ArrayBrackets
			{:
				currentType = varType;
				if(isFirstDeclaration(varName, varNameleft)){
					Obj temp = Tab.find(varName);
					if(temp != Tab.noObj)
						parser.report_error("Promenljiva " + varName + " je vec bila deklarisana. Linija: " + varNameleft, null);
					else
					{
						Struct type = varType;
						
						if(isArrayType)
							type = new Struct(Struct.Array, varType);
						if(currentClass!=null){
							Tab.insert(Obj.Fld, varName, type);
							parser.report_info("Deklarisano polje klase " + currentClass.getName() + ":"+ varName+ " na liniji "+ varNameleft, null);
						} else {
							Tab.insert(Obj.Var, varName, type);
							if(parser.scopeStack.peek()==ScopeEnum.LOCAL){
								parser.report_info("Deklarisana lokalna promenljiva "+ varName+ " na liniji "+ varNameleft, null);
							} else 
							parser.report_info("Deklarisana globalna promenljiva "+ varName+ " na liniji "+ varNameleft, null);
						}
					}
				}
			:}
			VarAdditional SEMI {: currentType = null; :}
			; 


VarAdditional ::= VarAdditional COMMA IDENT:varName ArrayBrackets
				  {:
				  		if(isFirstDeclaration(varName, varNameleft)){
							Obj temp = Tab.find(varName);
							if(temp == Tab.noObj)
								parser.report_error("Promenljiva " + varName + " je vec bila deklarisana. Linija: " + varNameleft, null);
							else
							{
								Struct type = currentType;
								
								if(isArrayType)
									type = new Struct(Struct.Array, currentType);

								if(currentClass!=null){
									Tab.insert(Obj.Fld, varName, currentType);
									parser.report_info("Deklarisano polje klase " + currentClass.getName() + ":"+ varName+ " na liniji "+ varNameleft, null);
								} else {
									Tab.insert(Obj.Var, varName, currentType);
									if(parser.scopeStack.peek()==ScopeEnum.LOCAL){
										parser.report_info("Deklarisana lokalna promenljiva "+ varName+ " na liniji "+ varNameleft, null);
									} else 
									parser.report_info("Deklarisana promenljiva "+ varName+ " na liniji "+ varNameleft, null);
								}
							}
						}
				
				  :}
				  |
				  /* epsilon */
				  ;


ArrayBrackets ::= LBRACKET RBRACKET
				  {: isArrayType = true; :}
				  |
				  /* epsilon */
				  {: isArrayType = false; :}
				  ;

ClassDecl ::= CLASS IDENT:name ExtendsDecl:type LBRACE
			  {: 
			  		parser.push(ScopeEnum.CLASS);
					if(isFirstDeclaration(name, nameleft) && type != Tab.nullType){
						currentClass = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
						parser.report_info("Deklarisana klasa " + name + " na liniji " + nameleft, null);
						Tab.openScope();
					}
			  :}
			  VarDeclList ClassMethodDeclList RBRACE
			  {:
					parser.popCheck(ScopeEnum.CLASS);
					Tab.chainLocalSymbols(currentClass);
					Tab.closeScope();
					currentClass = null;
			  :}
			  ;

ClassMethodDeclList ::= LBRACE MethodDeclList RBRACE 
						|
						/* epsilon */
						;
ExtendsDecl ::= EXTENDS Type:type
				{:
						if(type.getKind()==Struct.Class)
							RESULT = type;
						else {
							parser.report_info("Greska na liniji " + typeleft + " extends tip nije klasa", null);
							RESULT = Tab.nullType;
						} 
				:}
				|
				/* epsilon */
				;

Type ::= IDENT:typeName 
{:
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj) {
		parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
		RESULT = Tab.noType;
	}
	else {
		if (Obj.Type == typeNode.getKind()) {
			RESULT = typeNode.getType();
		}
		else {
			parser.report_error("Greska na liniji" + typeNameleft+ ": Ime " + typeName + " ne predstavlja tip ", null);
			RESULT = Tab.noType;
		}
	}
:};

MethodDeclList ::= MethodDeclList MethodDecl
					|
					/* epsilon */
					;

MethodDecl ::= MethType:retType IDENT:methName 
				{:
					if(isFirstDeclaration(methName, methNameleft) && retType!=Tab.nullType){
						currentMethod = Tab.insert(Obj.Meth, methName, (Struct) retType);
						parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
						Tab.openScope();
					}
				:}
				LPAREN FormPars RPAREN
				{:
					parser.push(ScopeEnum.LOCAL);
				:}
				VarDeclList LBRACE
			   {: 
			   		parser.popCheck(ScopeEnum.LOCAL);
			   		currentMethod.setAdr(Code.pc);
			   		if ("main".equals(methName)) {
			   			Code.mainPc = currentMethod.getAdr();
			   		}
			   		Code.put(Code.enter);
			   		Code.put(currentMethod.getLevel());
			   		Code.put(Tab.currentScope().getnVars());
			   :}
			   StatementList RBRACE 
			   {:
			   	 if (!returnFound && retType != Tab.noType)
			   	 	parser.report_error("Semanticka greska na liniji " + methNameleft + ": funcija " + methName + " nema return iskaz!", null);
				
				 Code.put(Code.exit);
				 Code.put(Code.return_);
				  
				 Tab.chainLocalSymbols(currentMethod);
			   	 Tab.closeScope();
			   	 
				 returnFound = false;
				 currentMethod = null;
				 
			   :}
			   ;

MethType ::= Type:type
			 {:
			 	RESULT = type;
			 :}
			 |
			 VOID
			 {:
			 	RESULT = Tab.noType;
			 :}
			 ;
				

FormPars ::= FormalParamList | /* epsilon */ ;

FormalParamList ::= FormalParamList COMMA FormalParamDecl
					|
					FormalParamDecl
					;

FormalParamDecl ::= Type:type IDENT:name ArrayBrackets 
					{:
						if(isFirstDeclaration(name, nameleft) && type != Tab.nullType){
							Struct methType = type;
							if(isArrayType){
								methType = new Struct(Struct.Array, type);
							}
							Tab.insert(Obj.Var, name, methType);
							parser.report_info("Formalni parametar " + name ,null);
						}
					:}
					;

StatementList ::= StatementList Statement
					|
				  /* epsilon */
				  ;

Statement ::= Matched | Unmatched ;

Unmatched ::= IF LPAREN Condition RPAREN Statement | IF LPAREN Condition RPAREN Matched ELSE Unmatched;
	
Matched ::=   DesignatorStatement SEMI
			  |
			  IF LPAREN Condition RPAREN Matched ELSE Matched
			  |
			  DO Statement WHILE LPAREN Condition RPAREN SEMI
			  |
			  BREAK SEMI
			  |
			  CONTINUE SEMI
			  |
			  RETURN SEMI
			  |
			  RETURN Expr:t SEMI
			  {:
			  	 returnFound = true;
				 Struct currMethType = currentMethod.getType();
				 if (!currMethType.compatibleWith(t)) {
				 	parser.report_error("Greska na liniji " + tleft + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName(), null);
				 }			  	 
			  :}
			  |
			  READ LPAREN Designator RPAREN SEMI
			  |
			  PRINT LPAREN Expr:t RPAREN SEMI 
			  {: 
			  	parser.printCallCount++;
			  	 if (t != Tab.intType && t != Tab.charType)
			  	 	parser.report_error("Semanticka greska na liniji " + tleft + ": Operand instrukcije PRINT mora biti char ili int tipa ", null);
			  	 if (t == Tab.intType) {
			  	 	Code.loadConst(5);
			  	 	Code.put(Code.print);
			  	 }
			  	 
			  	 if (t == Tab.charType) {
			  	 	Code.loadConst(1);
			  	 	Code.put(Code.bprint);
			  	 }
				 //System.out.println("Print gotov");
			  :}
			  |
			  LBRACE StatementList RBRACE
			  ;

DesignatorStatement ::= Designator EQUAL Expr {: parser.report_info("=", null); :}
						|
						Designator LPAREN ActualPars RPAREN {: parser.report_info("()", null); :}
						|
						Designator INC {: parser.report_info("++", null); :}
						|
						Designator DEC {: parser.report_info("--", null); :}
						;


				  
Expr ::= Expr:te Addop Term:t
		{:
			if (te.equals(t) && te == Tab.intType)
				RESULT = te;
			else {
				parser.report_error("Greska na liniji "+ teleft+" : nekompatibilni tipovi u izrazu za sabiranje.", null);
				RESULT = Tab.noType;
			} 
		:}
		|
		Term:t
		{: RESULT = t; :}
		;

					
Term ::= Term:te Mulop Factor:t
		 {:
			if (te.equals(t) && te == Tab.intType)
					RESULT = te;
				else {
					parser.report_error("Greska na liniji "+ teleft+" : nekompatibilni tipovi u izrazu za mnozenje.", null);
					RESULT = Tab.noType;
				} 
		 :}
     	 | 
     	 Factor:t
		 {: RESULT = t; :} 
     	 ; 



Factor ::=  Designator:d
		    {: 
		   		RESULT = d.getType();
		   		Code.load(d); 
		    :}
		    |
		    Designator:func LPAREN ActualPars RPAREN
		    {:
		       if (Obj.Meth == func.getKind()) { 
		   	   	   parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
		   	   	   if (func.getType() == Tab.noType) { 
		   	   	   		parser.report_error("Semanticka greska " + func.getName() + " ne moze se koristiti u izrazima jer nema povratnu vrednost, linija " + funcleft, null);
		   	   	   	}
		   	   	   	else {
		   	   	   		int destAdr = func.getAdr() - Code.pc;
		   	   	   		Code.put(Code.call);
		   	   	   		Code.put2(destAdr);
		   	   	   }
		   	   	   RESULT = func.getType();
		   	   } else {
		   	   	   parser.report_error("Greska na liniji " + funcleft+" : ime " + func.getName() + " nije funkcija!", null);
		   	   	   RESULT = Tab.noType;
		   	   }
		    :}
		    |
			NUM_CONST
			{: RESULT = Tab.intType; :} 
			|
			CHAR_CONST
			{: RESULT = Tab.charType; :} 
			|
			BOOL_CONST
			{: RESULT = parser.boolType; :} 			
			|
			NEW Type LBRACKET Expr RBRACKET {: parser.report_info("new2 ", null); :}
			|
			NEW Type {: parser.report_info("new1 ", null); :}
			|
			LPAREN Expr:exp RPAREN
			{: RESULT = exp; :}
		   ;
  
ActualPars ::= ActualParamList 
				| 
			   /* epsilon */ 
			   ;
			   
ActualParamList ::= ActualParamList COMMA Expr
					|
					Expr
					;

Condition ::= Condition LOGICAL_OR CondTerm 
        	  | 
        	  CondTerm 
        	  ; 

CondTerm ::=  CondTerm LOGICAL_AND CondFact 
        	  | 
        	  CondFact 
        	  ; 

CondFact ::= CondFact Relop Expr 
       		 |
			 Expr  
       		 ; 
	
Designator ::= IDENT:name
			   {:
					Obj obj = Tab.find(name);
					if (obj == Tab.noObj) { 
						parser.report_error("Greska na liniji " + nameleft + " : ime " + name + " nije deklarisano! ", null);
					}
					RESULT = obj;
			   :}
			   |
			   Designator DOT IDENT
			   |
			   Designator:d LBRACKET Expr:exp RBRACKET
			   {:
					if (exp != Tab.intType) {
						parser.report_error("Greska na liniji " + expleft + ": izraz unutar zagrada [] mora biti tipa int", null);
						RESULT = Tab.noObj;
					} else {
						if (d.getType().getKind() == Struct.Array) {
							RESULT = new Obj(Obj.Elem, "DesignatorArray", d.getType().getElemType());
						} else {
							parser.report_error("Greskaa na liniji " + dleft + ": " + d.getName() + " mora biti niz", null);
							RESULT = Tab.noObj;
						}
					}

			   :} 
			   ;


Relop ::= IS_EQUAL | NOT_EQUAL | GREATER | GREATER_OR_EQUAL | LESS | LESS_OR_EQUAL;

Addop ::= PLUS
		  {: RESULT = Code.add; :}
 		  |
		  MINUS
		  {: RESULT = Code.sub; :}
		  ;

Mulop ::= MUL
		  {: RESULT = Code.mul; :}  
		  | 
		  DIV
		  {: RESULT = Code.div; :}
		  | 
 		  MOD
		  {: RESULT = Code.mul; :}
		  ;
		   
   
			  


