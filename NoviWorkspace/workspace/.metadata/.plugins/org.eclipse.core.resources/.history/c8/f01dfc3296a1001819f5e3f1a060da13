package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.mj.runtime.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.*;
import java.io.*;
import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;
import rs.ac.bg.etf.pp1.util.*;

public class Compiler {

	static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}

	private static final String COMPILER_FORMAT = "<source file> <object file name>";

	private Symbol syntaxCheck(Yylex lexer) throws Exception {
		MJParser parser = new MJParser(lexer);

		return parser.parse();
	}

	public static void main(String[] args) throws Exception {
		Logger log = Logger.getLogger(Compiler.class);
		Reader bufferReader = null;

		try {
			File source = new File("test/program.mj");
			log.info("Compiling source file :" + source.getAbsolutePath());

			bufferReader = new BufferedReader(new FileReader(source));

			Yylex lexer = new Yylex(bufferReader);

			MJParser parser = new MJParser(lexer);

			log.info("====================== Performing Syntax Check ======================");
			Symbol symbol = parser.parse();

			SyntaxNode root = (SyntaxNode) symbol.value;

			if (!(root instanceof Program) || parser.errorDetected) {
				log.error("Sintaksna greska! Prevodjenje se ne moze nastaviti");

				return;
			}

			Program program = (Program) root;

			log.info(program.toString(""));

			SemanticAnalyzer semanticAnalyzer = new SemanticAnalyzer();

			log.info("====================== Performing Semantic Check ======================");

			root.traverseBottomUp(semanticAnalyzer);

			if (semanticAnalyzer.isCorrect == false) {
				log.error("Semanticka greska! Prevodjenje se ne moze nastaviti");

				return;
			}

			log.info("====================== Dumping Symol Table Content ======================");
			//tsdump();

			/*File destObjFile = new File(args[1]);

			if (destObjFile.exists()) {
				log.info("Destination file already exists. Its content is being deleted.");
				destObjFile.delete();
			}

			CodeGenerator codeGenerator = new CodeGenerator();

			/*
			 * log.
			 * info("====================== Performing Code Generation ======================"
			 * ); program.traverseBottomUp((Visitor) codeGenerator);
			 * 
			 * Code.write(new FileOutputStream(destObjFile));
			 * 
			 * log.info("Compilation completed successfuly!");
			 */
		} catch (FileNotFoundException e) {

		} finally {
			if (bufferReader != null)
				try {
					bufferReader.close();
				} catch (IOException exc) {
					exc.printStackTrace();
				}
		}
	}
}